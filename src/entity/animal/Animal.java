package entity.animal;

import entity.Island;
import entity.Location;
import entity.animal.herbivore.Herbivore;
import entity.animal.predator.Predator;
import entity.plant.Plant;

import java.util.List;
import java.util.Random;

public abstract class Animal {
    protected String name;
    protected double weight;
    protected int speed;
    protected double foodNeeded;
    protected double hungerLevel;
    protected Location location;
    private static final Random random = new Random();

    public Animal(String name, double weight, int speed, double foodNeeded, Location location) {
        this.name = name;
        this.weight = weight;
        this.speed = speed;
        this.foodNeeded = foodNeeded;
        this.hungerLevel = foodNeeded; // –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –µ–¥—ã
        this.location = location;
    }

    public double getHungerLevel() {
        return hungerLevel;
    }

    public void reproduce() {
        List<Animal> animalsInLocation = location.getAnimals();

        // –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞
        long count = animalsInLocation.stream()
                .filter(a -> a.getClass().equals(this.getClass()))
                .count();

        if (count < 2) {
            System.out.println("‚ùå " + name + " –Ω–µ –Ω–∞—à–µ–ª –ø–∞—Ä—É –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è.");
            return;
        }

        // –µ—Å—Ç—å –ª–∏ –µ–¥–∞ –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è (–Ω–µ –º–µ–Ω–µ–µ 50% –æ—Ç foodNeeded)
        if (hungerLevel < foodNeeded * 0.5) {
            System.out.println("‚ùå " + name + " —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
        if (location.getAnimals().size() >= location.getMaxAnimalsPerCell()) {
            System.out.println("‚ùå " + name + " –Ω–µ —Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è, –∫–ª–µ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞.");
            return;
        }

        try {
            Animal baby = this.getClass().getDeclaredConstructor(Location.class).newInstance(this.location);
            location.addAnimal(baby);
            System.out.println("üê£ –ù–æ–≤—ã–π " + baby.getName() + " –ø–æ—è–≤–∏–ª—Å—è –≤ –∫–ª–µ—Ç–∫–µ (" + location.getX() + "," + location.getY() + ")!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void eat() {
        List<Plant> plants = location.getPlants();
        List<Animal> animals = location.getAnimals();

        if (this instanceof Herbivore && !plants.isEmpty()) {
            plants.remove(0);
            hungerLevel = foodNeeded;
            System.out.println(name + " —Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ! üåø");
            return;
        }

        if (this instanceof Predator) {
            for (Animal prey : animals) {
                if (prey != this && Math.random() < 0.5) {
                    location.getAnimals().remove(prey);
                    hungerLevel = foodNeeded;
                    System.out.println(name + " —Å—ä–µ–ª " + prey.getName() + "! ü•©");
                    return;
                }
            }
        }

        System.out.println(name + " –Ω–µ –Ω–∞—à–µ–ª –µ–¥—ã. ‚ùå");
    }

    public void move(Island island) {
        Random random = new Random();
        int dx = random.nextInt(speed * 2 + 1) - speed;
        int dy = random.nextInt(speed * 2 + 1) - speed;

        int newX = Math.max(0, Math.min(island.getWidth() - 1, location.getX() + dx));
        int newY = Math.max(0, Math.min(island.getHeight() - 1, location.getY() + dy));

        Location newLocation = island.getLocation(newX, newY);

        if (newLocation != location) {
            location.getAnimals().remove(this);
            newLocation.addAnimal(this);
            this.location = newLocation;
            System.out.println("üö∂ " + name + " –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ (" + newX + "," + newY + ")");
        } else {
            System.out.println("‚ùå " + name + " –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è.");
        }
    }

    public void updateHunger() {
        hungerLevel -= 1;
        if (hungerLevel <= 0) {
            location.getAnimals().remove(this);
            System.out.println(name + " —É–º–µ—Ä –æ—Ç –≥–æ–ª–æ–¥–∞.");
        }
    }

    public Location getLocation() {
        return location;
    }

    public String getName() {
        return name;
    }
}